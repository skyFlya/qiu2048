{"version":3,"sources":["assets\\scripts\\ui\\UIUtils.ts"],"names":[],"mappings":";;;;;;;AAAA,kCAAiC;AACjC,sDAAqD;AAGrD;IAAA;IAwCA,CAAC;IAtCG;;;;;;OAMG;IACW,qBAAa,GAA3B,UAA4B,IAAa,EAAE,IAA6B,EAAE,MAAW,EAAE,KAAqC;QAArC,sBAAA,EAAA,QAAgB,6BAAa,CAAC,OAAO;QACxH,IAAI,IAAI,IAAI,IAAI,IAAI,OAAM,CAAC,IAAI,CAAC,IAAI,UAAU,EAAE;YAC5C,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE;gBACb,SAAS;gBACT,IAAI,KAAK,GAAG,CAAC,EAAE;oBACX,IAAI,IAAI,IAAI,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;wBAC1B,IAAM,aAAa,GAAG,IAAI,CAAC,qBAAqB,CAAC,CAAC;wBAClD,IAAI,aAAa,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,aAAa,CAAC,IAAI,KAAK,GAAG,IAAI,EAAE;4BACzE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;4BACb,OAAO;yBACV;wBACD,IAAI,CAAC,qBAAqB,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;qBACtD;iBACJ;gBACD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBACxB,SAAG,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC;YAClC,CAAC,EAAE,IAAI,CAAC,CAAC;SACZ;IACL,CAAC;IAED;;;OAGG;IACW,sBAAc,GAA5B,UAA6B,IAAa;QACtC,IAAI,IAAI,EAAE;YACN,IAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YACvE,IAAM,MAAM,GAAI,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1E,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;SACzC;IACL,CAAC;IACL,cAAC;AAAD,CAxCA,AAwCC,IAAA;AAxCY,0BAAO","file":"","sourceRoot":"/","sourcesContent":["import { App } from \"../app/App\";\r\nimport { QuickClickCfg } from \"../cfg/QuickClickCfg\";\r\n\r\n\r\nexport class UIUtils {\r\n\r\n    /**\r\n     * 注册按钮点击事件\r\n     * @param node \r\n     * @param func \r\n     * @param target \r\n     * @param delay \r\n     */\r\n    public static addClickEvent(node: cc.Node, func: (node: cc.Node) => void, target: any, delay: number = QuickClickCfg.DEFAULT): void {\r\n        if (node && func && typeof(func) == 'function') {\r\n            node.on('click', ()=>{\r\n                // 防止连续点击\r\n                if (delay > 0) {\r\n                    if (node && cc.isValid(node)) {\r\n                        const lastClickTime = node['__last_click_time__'];\r\n                        if (lastClickTime && (new Date().getTime() - lastClickTime) <= delay * 1000) {\r\n                            cc.log('连点');\r\n                            return;\r\n                        }\r\n                        node['__last_click_time__'] = new Date().getTime();\r\n                    }\r\n                }\r\n                func.call(target, node);\r\n                App.soundMgr.playClickSound();\r\n            }, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 全屏缩放\r\n     * @param node \r\n     */\r\n    public static fullScreenNode(node: cc.Node): void {\r\n        if (node) {\r\n            const scaleX = Math.max(1, cc.winSize.width) / Math.max(1, node.width);\r\n            const scaleY =  Math.max(1, cc.winSize.height) / Math.max(1, node.height);\r\n            node.scale = Math.max(scaleX, scaleY);\r\n        }\r\n    }\r\n}"]}