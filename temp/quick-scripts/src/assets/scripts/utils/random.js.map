{"version":3,"sources":["assets\\scripts\\utils\\random.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/**\n * 随机数工具类\n */\nexport const random = {\n\n    /**\n     * 获取[min,max)之间的随机数\n     * @param area \n     */\n    findRandomBase(min: number, max: number) {\n        return Math.random() * (max - min) + min\n    },\n\n    /**\n     * 获取[min,max)之间的随机整数\n     * @param min \n     * @param max \n     */\n    findRandomInteger(min: number, max: number) {\n        return Math.floor(Math.random() * (max - min) + min)\n    },\n\n    /**\n     * 按照arr获取权重值，arr为权重列表\n     * @param arr \n     */\n    findRandomArray(arr: Array<number> = []) {\n        let count = 0\n        for (let m in arr) {\n            if (arr[m]) {\n                count += arr[m]\n            }\n        }\n        let ran = this.findRandomBase() * count\n        for (let m in arr) {\n            if (ran <= arr[m]) {\n                return m\n            }\n        }\n        return 0\n    },\n    /**\n     * 从数组data中取出cout个随机值\n     * @param count \n     * @param data \n     */\n    findListFromArray(count: number, data: Array<any> = []) {\n        if (count >= data.length) {\n            return data\n        } else if (count < data.length) {\n            let temp: Array<any> = []\n            let arr = this.randomNumBoth(data.length, count)\n            for (let m in arr) {\n                if (data[arr[m]]) {\n                    temp.push(data[arr[m]])\n                }\n            }\n            return temp\n        }\n    },\n    /**\n    * 从数组data中取出cout个随机值\n    * @param count \n    * @param data \n    */\n    findListFromObject(count: number, data: object) {\n        let obj = Object.keys(data)\n        if (count >= obj.length) {\n            return data\n        } else if (count < obj.length) {\n            let temp: object = {}\n            let arr = this.randomNumBoth(obj.length, count)\n            for (let m in arr) {\n                if (data[arr[m]]) {\n                    temp[arr[m]] = data[arr[m]]\n                }\n            }\n            return temp\n        }\n    },\n    isCheckOk(limit, max) {\n        let random = this.findRandomBase(0, max)\n        console.error(\"ischeckOk:\", limit, max, random, random <= limit)\n        return random <= limit\n    },\n    //取出0，maxLen内的maxNum个数字\n    randomNumBoth(maxLen, maxNum) {\n        var arr = [];\n        for (var i = 0; i < maxLen; i++) {\n            arr.push(i)\n        }\n\n        var numArr = [];\n        //最大的循环次数\n        var arrLength = arr.length;\n        for (var i = 0; i < arrLength; i++) {\n            //取出随机数 \n            var number = Math.floor(Math.random() * arr.length); //生成随机数num\n            //往新建的数组里面传入数值\n            numArr.push(arr[number]);\n            //传入一个删除一个，避免重复\n            arr.splice(number, 1);\n            if (arr.length <= arrLength - maxNum) {\n                return numArr;\n            }\n        }\n\n    }\n\n}"]}